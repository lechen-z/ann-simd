关于代码的一些简单说明:
1.当前的main.cc函数是为pq_fastscan（也就是最终版本）而设计的，因此执行后也是执行fastscan优化后的PQ算法，不过其他优化算法的实现代码也放在这里以供参考
2.关于得到的最优结果：因为每次测试都略有误差，并且我得到最优结果时的召回率仅多出0.9一些，因此直接运行可能会出现召回率为0.89左右的情况。不过多调几次参数就能发现
性能的最优情况就在num_subvector=8，k_rerank在300-400这个范围内，微调k_rerank应该就能得到与报告中大致相似的结果。一般当recall在0.9以上时的latency都在1500-2000us
浮动。与暴力算法相比加速比大约有11-12倍。
3.此次作业的调试过程全程都是在服务器上进行的，因此实验报告中出现的所有结果(包括报告中的最优结果)在提交记录上都能找到。